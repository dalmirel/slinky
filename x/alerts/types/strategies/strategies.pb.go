// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/alerts/v1/strategies.proto

package strategies

import (
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorAlertIncentive defines the incentive strategy to be executed for a
// validator that has been confirmed to have at fault for an x/alerts alert.
// This strategy is expected to slash half of the validator's stake.
type ValidatorAlertIncentive struct {
	// The validator that has been confirmed to have been at fault for an alert.
	Validator types.Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
	// AlertSigner is the signer of the alert referenced by the conclusion that
	// created this incentive.
	AlertSigner string `protobuf:"bytes,2,opt,name=alert_signer,json=alertSigner,proto3" json:"alert_signer,omitempty"`
	// AlertHeight is the height at which the infraction occurred
	AlertHeight uint64 `protobuf:"varint,3,opt,name=alert_height,json=alertHeight,proto3" json:"alert_height,omitempty"`
}

func (m *ValidatorAlertIncentive) Reset()         { *m = ValidatorAlertIncentive{} }
func (m *ValidatorAlertIncentive) String() string { return proto.CompactTextString(m) }
func (*ValidatorAlertIncentive) ProtoMessage()    {}
func (*ValidatorAlertIncentive) Descriptor() ([]byte, []int) {
	return fileDescriptor_1771803e525beb24, []int{0}
}
func (m *ValidatorAlertIncentive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorAlertIncentive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorAlertIncentive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorAlertIncentive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorAlertIncentive.Merge(m, src)
}
func (m *ValidatorAlertIncentive) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorAlertIncentive) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorAlertIncentive.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorAlertIncentive proto.InternalMessageInfo

func (m *ValidatorAlertIncentive) GetValidator() types.Validator {
	if m != nil {
		return m.Validator
	}
	return types.Validator{}
}

func (m *ValidatorAlertIncentive) GetAlertSigner() string {
	if m != nil {
		return m.AlertSigner
	}
	return ""
}

func (m *ValidatorAlertIncentive) GetAlertHeight() uint64 {
	if m != nil {
		return m.AlertHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidatorAlertIncentive)(nil), "slinky.alerts.v1.ValidatorAlertIncentive")
}

func init() { proto.RegisterFile("slinky/alerts/v1/strategies.proto", fileDescriptor_1771803e525beb24) }

var fileDescriptor_1771803e525beb24 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0xce, 0xc9, 0xcc,
	0xcb, 0xae, 0xd4, 0x4f, 0xcc, 0x49, 0x2d, 0x2a, 0x29, 0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x2e, 0x29,
	0x4a, 0x2c, 0x49, 0x4d, 0xcf, 0x4c, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80,
	0x28, 0xd1, 0x83, 0x28, 0xd1, 0x2b, 0x33, 0x94, 0x12, 0x4c, 0xcc, 0xcd, 0xcc, 0xcb, 0xd7, 0x07,
	0x93, 0x10, 0x45, 0x52, 0x92, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xf1, 0x60, 0x9e, 0x3e, 0x84,
	0x03, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x87, 0x88, 0x83, 0x58, 0x50, 0x51, 0xe9, 0x92, 0xd4,
	0xbc, 0x94, 0xd4, 0xa2, 0xdc, 0xcc, 0xbc, 0x12, 0xfd, 0xc4, 0xa4, 0xe4, 0x4c, 0xfd, 0x92, 0xca,
	0x02, 0x98, 0x95, 0x4a, 0x9d, 0x4c, 0x5c, 0xe2, 0x61, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xf9,
	0x45, 0x8e, 0x20, 0x7b, 0x3d, 0xf3, 0x92, 0x53, 0xf3, 0x4a, 0x32, 0xcb, 0x52, 0x85, 0xec, 0xb8,
	0x38, 0xcb, 0x60, 0x52, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x52, 0x7a, 0x08, 0xc3, 0xf4,
	0x40, 0x86, 0xe9, 0xc1, 0x35, 0x3b, 0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x84, 0xd0, 0x22, 0x64,
	0xcd, 0xc5, 0x03, 0xf6, 0x49, 0x7c, 0x71, 0x66, 0x7a, 0x5e, 0x6a, 0x91, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0xa7, 0x93, 0xc4, 0xa5, 0x2d, 0xba, 0x22, 0x50, 0x67, 0x3b, 0xa6, 0xa4, 0x14, 0xa5, 0x16,
	0x17, 0x07, 0x97, 0x14, 0x65, 0xe6, 0xa5, 0x07, 0x71, 0x83, 0x55, 0x07, 0x83, 0x15, 0x0b, 0x29,
	0xc2, 0x34, 0x67, 0xa4, 0x66, 0xa6, 0x67, 0x94, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x40, 0x95,
	0x78, 0x80, 0x85, 0xac, 0xfc, 0x4e, 0x6d, 0xd1, 0x95, 0x83, 0x06, 0x59, 0x26, 0xcc, 0xd5, 0xa0,
	0x60, 0xd3, 0x83, 0xfb, 0xa1, 0xeb, 0xf9, 0x06, 0x2d, 0x75, 0x68, 0xc0, 0x57, 0xc0, 0x82, 0x1e,
	0x87, 0x7f, 0x9d, 0xfc, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x24,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x38, 0x3b, 0xb3, 0x40, 0x37,
	0x37, 0xb5, 0x4c, 0x1f, 0xdd, 0x58, 0x70, 0xb0, 0x22, 0x45, 0x6a, 0x12, 0x1b, 0x38, 0x88, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0xae, 0xac, 0x85, 0xfa, 0x01, 0x00, 0x00,
}

func (m *ValidatorAlertIncentive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorAlertIncentive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorAlertIncentive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AlertHeight != 0 {
		i = encodeVarintStrategies(dAtA, i, uint64(m.AlertHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AlertSigner) > 0 {
		i -= len(m.AlertSigner)
		copy(dAtA[i:], m.AlertSigner)
		i = encodeVarintStrategies(dAtA, i, uint64(len(m.AlertSigner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStrategies(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStrategies(dAtA []byte, offset int, v uint64) int {
	offset -= sovStrategies(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorAlertIncentive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovStrategies(uint64(l))
	l = len(m.AlertSigner)
	if l > 0 {
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.AlertHeight != 0 {
		n += 1 + sovStrategies(uint64(m.AlertHeight))
	}
	return n
}

func sovStrategies(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStrategies(x uint64) (n int) {
	return sovStrategies(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorAlertIncentive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorAlertIncentive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorAlertIncentive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertHeight", wireType)
			}
			m.AlertHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlertHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStrategies(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStrategies
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStrategies
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStrategies
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStrategies        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStrategies          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStrategies = fmt.Errorf("proto: unexpected end of group")
)
